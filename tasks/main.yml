---
- name: Include OS-specific variables.
  ansible.builtin.include_vars: "{{ ansible_os_family }}.yml"

- name: Check if GitLab configuration file already exists.
  ansible.builtin.stat:
    path: /etc/gitlab/gitlab.rb
  register: gitlab_config_file

- name: Check if GitLab is already installed.
  ansible.builtin.stat:
    path: /usr/bin/gitlab-ctl
  register: gitlab_file

# Install GitLab and its dependencies.
- name: Install GitLab dependencies.
  ansible.builtin.package:
    name: "{{ gitlab_dependencies }}"
    state: present

- name: Install GitLab dependencies (Debian).
  ansible.builtin.apt:
    name: gnupg2
    state: present
  when: ansible_os_family == 'Debian'

- name: Download GitLab repository installation script.
  ansible.builtin.get_url:
    url: "{{ gitlab_repository_installation_script_url }}"
    dest: /tmp/gitlab_install_repository.sh
    validate_certs: "{{ gitlab_download_validate_certs }}"
    mode: "0755"
  when: not gitlab_file.stat.exists

- name: Install GitLab repository.
  ansible.builtin.command: bash /tmp/gitlab_install_repository.sh
  register: output
  changed_when: output.rc != 0
  when: not gitlab_file.stat.exists

- name: Define the Gitlab package name.
  ansible.builtin.set_fact:
    gitlab_package_name: "{{ gitlab_edition }}{{ gitlab_package_version_separator }}{{ gitlab_version }}"
  when: gitlab_version | default(false)

- name: Install GitLab
  ansible.builtin.package:
    name: "{{ gitlab_package_name | default(gitlab_edition) }}"
    state: present
  async: 300
  poll: 5
  when: not gitlab_file.stat.exists

# https://docs.gitlab.com/omnibus/settings/database.html
- name: Create a symbolic link
  ansible.builtin.file:
    src: /usr/bin/pg_dump
    dest: /opt/gitlab/bin/pg_dump
    owner: root
    group: root
    state: link
  when: not gitlab_postgresql_enable
# https://docs.gitlab.com/omnibus/settings/database.html
- name: Symlink psql
  ansible.builtin.file:
    src: /usr/bin/psql
    dest: /opt/gitlab/bin/psql
    owner: root
    group: root
    state: link
  when: not gitlab_postgresql_enable

# Start and configure GitLab. Sometimes the first run fails, but after that,
# restarts fix problems, so ignore failures on this run.
- name: Reconfigure GitLab (first run).
  ansible.builtin.shell:
    cmd:
      gitlab-ctl reconfigure
      creates=/var/opt/gitlab/bootstrapped
  become: true
  become_user: root
  failed_when: false

- name: Create GitLab SSL configuration folder.
  ansible.builtin.file:
    path: /etc/gitlab/ssl
    state: directory
    owner: root
    group: root
    mode: "0700"
  when: gitlab_create_self_signed_cert

- name: Create self-signed certificate
  ansible.builtin.shell:
    cmd:
      openssl req -new -nodes -x509 -subj "{{ gitlab_self_signed_cert_subj }}" -days 3650 -keyout {{ gitlab_ssl_certificate_key }} -out {{ gitlab_ssl_certificate }} -extensions v3_ca
    executable: /bin/bash
    creates: "{{ gitlab_ssl_certificate }}"
  become: true
  become_user: root
  when: gitlab_create_self_signed_cert

- name: Copy GitLab configuration file.
  ansible.builtin.template:
    src: "{{ gitlab_config_template }}"
    dest: /etc/gitlab/gitlab.rb
    owner: root
    group: root
    mode: "0600"
  notify: Restart gitlab

- name: Disable sign-up for new users
  ansible.builtin.shell:
    cmd:
      echo "UPDATE application_settings SET signup_enabled = false" | gitlab-psql
  register: signup_disable_result
  when: gitlab_disable_user_signup
  ignore_errors: true
  changed_when: signup_disable_result.rc != 0

# The installation sets the password in /etc/gitlab/initial... which expires, this is to add another Admin user
# - name: Create admin user
#   ansible.builtin.shell:
#     cmd: |
#       gitlab-rails runner "u = User.new(username: 'root1', email: 'root@example.com', name: 'root', password: '5iveL\!fe', password_confirmation: '5iveL\!fe'); u.admin = true;u.assign_personal_namespace;u.save!"
        # gitlab-rake "gitlab:password:reset[root]"
#   ignore_errors: true
